apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: {{ .Values.hpa.nginxMinReplicas }}
  template:
    metadata:
      labels:
        app: nginx
      # Force nginx update whenever this file changes.
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/nginx-configmap.yaml") . | sha256sum }}
    spec:
      nodeSelector:
        webServer: "yes"
      containers:
        - name: nginx
          image: nginx:1.19.2
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: {{ .Values.nginxCpuLimit | default "1000m" }}
              memory: {{ .Values.nginxMemoryLimit | default "4Gi" }}
            requests:
              cpu: {{ .Values.nginxCpuRequest | default "250m" }}
              memory: {{ .Values.nginxMemoryRequest | default "1Gi" }}
          ports:
            - containerPort: 80
            - containerPort: 443
            {{- if .Values.minio.enabled }}
            - containerPort: 9000
            {{- end }}
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
              name: nginx-conf
            {{- if .Values.requireHttps }}
            - mountPath: /ssl/{{ .Values.tlsCertFile | default "signed_chain.crt" }}
              subPath: {{ .Values.tlsCertFile | default "signed_chain.crt" }}
              readOnly: true
              name: {{ .Values.tlsCertSecretName | default "tls-cert" }}
            - mountPath: /ssl/{{ .Values.tlsKeyFile | default "domain.key" }}
              subPath: {{ .Values.tlsKeyFile | default "domain.key" }}
              readOnly: true
              name: {{ .Values.tlsKeySecretName | default "tls-key" }}
            {{- if hasKey .Values "redirects" }}
            {{- range .Values.redirects }}
            - mountPath: /ssl/{{ .tlsCertFile }}
              subPath: {{ .tlsCertFile }}
              readOnly: true
              name: {{ .tlsCertSecretName }}
            - mountPath: /ssl/{{ .tlsKeyFile }}
              subPath: {{ .tlsKeyFile }}
              readOnly: true
              name: {{ .tlsKeySecretName }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{ include "volumeMounts.template" . | indent 12 }}
        {{- if index .Values "kube-prometheus-stack" "enabled" }}
        - name: nginx-exporter
          image: "nginx/nginx-prometheus-exporter:0.8.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - "-nginx.scrape-uri=http://localhost:80/status"
          ports:
            - name: nginx-ex-port
              containerPort: 9113
              protocol: TCP
        {{- end }}
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
        {{- if .Values.requireHttps }}
        - name: {{ .Values.tlsCertSecretName | default "tls-cert" }}
          secret:
            secretName: {{ .Values.tlsCertSecretName | default "tls-cert" }}
            items:
              - key: {{ .Values.tlsCertFile | default "signed_chain.crt" }}
                path: {{ .Values.tlsCertFile | default "signed_chain.crt" }}
        - name: {{ .Values.tlsKeySecretName | default "tls-key" }}
          secret:
            secretName: {{ .Values.tlsKeySecretName | default "tls-key" }}
            items:
              - key: {{ .Values.tlsKeyFile | default "domain.key" }}
                path: {{ .Values.tlsKeyFile | default "domain.key" }}
        {{- if hasKey .Values "redirects" }}
        {{- range .Values.redirects }}
        - name: {{ .tlsCertSecretName }}
          secret:
            secretName: {{ .tlsCertSecretName }}
            items:
              - key: {{ .tlsCertFile }}
                path: {{ .tlsCertFile }}
        - name: {{ .tlsKeySecretName }}
          secret:
            secretName: {{ .tlsKeySecretName }}
            items:
              - key: {{ .tlsKeyFile }}
                path: {{ .tlsKeyFile }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{ include "volumes.template" . | indent 8 }}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
  labels:
    k8s-app: nginx-status-metrics
{{- if .Values.metallb.enabled }}
  annotations:
    metallb.universe.tf/address-pool: my-ip-space
{{- else }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "1200"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
{{- end }}
spec:
{{- if .Values.metallb.enabled }}
  loadBalancerIP: {{ .Values.metallb.loadBalancerIp }}
{{- end }}
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  {{- if .Values.minio.enabled }}
  - name: minio
    port: 9000
    protocol: TCP
    targetPort: 9000
  {{- end }}
  {{- if index .Values "kube-prometheus-stack" "enabled" }}
  - name: http-metrics
    port: 9113
    protocol: TCP
    targetPort: 9113
  {{- end }}
  selector:
    app: nginx
  type: LoadBalancer
